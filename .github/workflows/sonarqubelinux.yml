name: Sonarqube linux Build

on:
  push:
    branches:
      - tagrelease
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - run: sudo apt-get update -y && sudo apt-get install zip -y
      - run: sudo apt-get install unzip -y
      - run: sudo apt-get install curl -y
      - run: sudo apt-get install rsync -y
      - run: sudo apt install apt-transport-https  -y
      - run: sudo apt-get install -y dotnet-sdk-6.0


      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Copy all dotnet files into one folder 1
        run: |
          ls **

      - name: Copy all dotnet files into one folder 2
        run: |
          mkdir dotnetfiles
          
      - name: Copy all dotnet files into one folder 2
        run: |          
          rsync -av --exclude='dotnetfiles' ** dotnetfiles

      - name: Copy all dotnet files into one folder 3
        run: |
          ls -al dotnetfiles
      - name: Copy all dotnet files into one folder 4
        run: |
          mkdir dotnetfiles2 
      - name: Copy all dotnet files into one folder 5
        run: |         
          cp -r dotnetfiles/**/*.csproj dotnetfiles2

      - name: Copy all dotnet files into one folder 6
        run: |
          rsync "**/"*.csproj dotnetfiles

      - name: Copy all dotnet files into one folder 
        run: |
          ls **
          ls dotnetfiles
          ls -r dotnetfiles/*.csproj
          dotnet new sln -n dotnetbuild
          dotnet sln add (ls -r **/*.csproj)

      - name: Build and SonarQube analyze
 # Needed to get PR information, if any
        run: |
          dotnet tool install --global dotnet-sonarscanner
          export PATH="$PATH:/home/runner/.dotnet/tools"
          dotnet sonarscanner begin /k:"Yus-test" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          dotnet build MyConsoleApp/MyConsoleApp.sln 
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"


